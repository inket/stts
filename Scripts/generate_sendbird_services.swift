#!/usr/bin/swift

import Foundation

struct SendbirdService {
    let id: String
    let url: URL
    var statusPageID: String = ""

    var name: String {
        id
            .components(separatedBy: "-")
            .map { $0.capitalized(firstLetterOnly: true) }
            .filter { $0 != "1" }
            .joined(separator: " ")
    }

    var className: String {
        var sanitizedName = name
        sanitizedName = sanitizedName.replacingOccurrences(of: " & ", with: "And")
        sanitizedName = sanitizedName.replacingOccurrences(of: "/", with: "")
        sanitizedName = sanitizedName.replacingOccurrences(of: ":", with: "")
        sanitizedName = sanitizedName.components(separatedBy: " ")
            .map { $0.capitalized(firstLetterOnly: true) }
            .joined(separator: "")
        return "Sendbird\(sanitizedName)"
    }

    var output: String {
        return """
        class \(className): SendbirdService, SubService {
            let id = "\(id)"
            let name = "Sendbird (\(name))"
            let url = URL(string: "\(url.absoluteString)")!
            let statusPageID = "\(statusPageID)"
        }
        """
    }
}

struct SendbirdLocation: Codable {
    let location: String
    let locationID: String
}

extension String {
    func capitalized(firstLetterOnly: Bool) -> String {
        return firstLetterOnly ? (prefix(1).capitalized + dropFirst()) : self
    }
}

func envVariable(forKey key: String) -> String {
    guard let variable = ProcessInfo.processInfo.environment[key] else {
        print("error: Environment variable '\(key)' not set")
        exit(1)
    }

    return variable
}

func discoverServices() -> [SendbirdService] {
    var dataResult: Data?

    let semaphore = DispatchSemaphore(value: 0)
    let url = URL(string: "https://sendbird.com/status")!

    URLSession.shared.dataTask(with: url) { data, _, _ in
        dataResult = data
        semaphore.signal()
    }.resume()

    _ = semaphore.wait(timeout: .now() + .seconds(10))

    guard
        let data = dataResult,
        let body = String(data: data, encoding: .utf8) as NSString?
    else {
        print("warning: Build script generate_sendbird_services could not retrieve list of services")
        exit(0)
    }

    var services = [String: SendbirdService]()

    // swiftlint:disable:next force_try
    let regex = try! NSRegularExpression(
        pattern: "<td><span id=\"([^\"]*?)\" class=\"status-dot\"><\\/span>.*?<a href=\"(.*?)\".*?<\\/td>",
        options: [.caseInsensitive, .dotMatchesLineSeparators]
    )

    let range = NSRange(location: 0, length: body.length)
    regex.enumerateMatches(in: body as String, options: [], range: range) { textCheckingResult, _, _ in
        guard let textCheckingResult = textCheckingResult, textCheckingResult.numberOfRanges == 3 else { return }

        let id = body.substring(with: textCheckingResult.range(at: 1))
        let pageURL = body.substring(with: textCheckingResult.range(at: 2))

        services[id] = SendbirdService(id: id, url: URL(string: pageURL)!)
    }

    // swiftlint:disable:next force_try
    let regex2 = try! NSRegularExpression(
        pattern: "var obj = \\[(.*?)\\];",
        options: [.caseInsensitive, .dotMatchesLineSeparators]
    )

    regex2.enumerateMatches(in: body as String, options: [], range: range) { textCheckingResult, _, _ in
        guard let textCheckingResult = textCheckingResult, textCheckingResult.numberOfRanges == 2 else { return }

        let jsData = body.substring(with: textCheckingResult.range(at: 1))
        let rawJSON = jsData.trimmingCharacters(in: .whitespacesAndNewlines)
            .replacingOccurrences(of: "\n", with: "")
            .replacingOccurrences(of: "\t", with: "")
            .replacingOccurrences(of: "'", with: "\"")
        let json = "[\(rawJSON)]"

        // swiftlint:disable:next force_try
        let locations = try! JSONDecoder().decode([SendbirdLocation].self, from: json.data(using: .utf8)!)

        locations.forEach {
            services[$0.location]?.statusPageID = $0.locationID
        }
    }

    return Array(services.values).sorted(by: { $0.name.caseInsensitiveCompare($1.name) == .orderedAscending })
}

func main() {
    let srcRoot = envVariable(forKey: "SRCROOT")
    let outputPath = "\(srcRoot)/stts/Services/Generated/SendbirdServices.swift"

    let services = discoverServices()

    let classes = services.map { "\($0.className).self" }

    let header = """
    // This file is generated by generate_sendbird_services.swift and should not be modified manually.

    import Foundation

    enum Sendbird {
        static let classes = [
            \(classes.joined(separator: ",\n        "))
        ]
    }

    """

    let content = services.map { $0.output }.joined(separator: "\n\n")
    let footer = ""

    let output = [header, content, footer].joined(separator: "\n")

    // swiftlint:disable:next force_try
    try! output.write(toFile: outputPath, atomically: true, encoding: .utf8)

    print("Finished generating Sendbird services.")
}

main()
